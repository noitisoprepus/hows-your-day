@page "/"

@using Shared.DTOs.Day
@using HowsYourDayApp.Services

@inject DayService DayService
@inject NavigationManager NavigationManager

<PageTitle>How's Your Day?</PageTitle>

@if (intialized)
{
    @if (alreadyPosted)
    {
        <div class="summary-container">
            <p class="rating-warning">You have already logged today.</p>
            <p class="rating-warning">Come back tomorrow!</p>
            <div class="summary-user">
                <p class="rating-user-label">Your Day: </p>
                <p class="rating-user-value">@usrRating/10</p>
            </div>
            <div class="summary-average">
                <p class="rating-average-label">Today's Average: </p>
                <p class="rating-average-value">@avgRating/10</p>
            </div>
        </div>
    }
    else
    {
        <div class="form-container">
            <p class="rating-header">How's your day?</p>
            <p class="rating-text">@createDayDTO.Rating</p>
            <Ratings Rating="createDayDTO.Rating" RatingChangedEvent="OnRatingChanged"/>
            <textarea placeholder="(Optional) Write your thoughts, reflections, and experiences from today." @bind="createDayDTO.Comment" />
            <button class="btn btn-primary rating-submit-button" @onclick="SubmitDayEntry">Submit</button>
        </div>
    }
}

@code {
    private CreateDayDTO createDayDTO = new CreateDayDTO();
    private bool alreadyPosted = false;
    private bool intialized = false;
    private int avgRating = 0;
    private int usrRating = 0;

    protected override async Task OnInitializedAsync()
    {
        await HandleFetchUserHasPostedToday();
        await HandleFetchAverageRatingToday();
        await HandleFetchUserRatingToday();
        OnRatingChanged(5);
        intialized = true;
    }

    private async Task HandleFetchUserHasPostedToday()
    {
        var result = await DayService.HasUserPostedTodayAsync();
        if (!result.IsSuccessStatusCode &&
            result.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            alreadyPosted = await result.Content.ReadFromJsonAsync<bool>();
        }
    }

    private async Task HandleFetchAverageRatingToday()
    {
        var result = await DayService.GetAverageRatingTodayAsync();
        if (result.IsSuccessStatusCode)
        {
            avgRating = await result.Content.ReadFromJsonAsync<int>();
        }
    }

    private async Task HandleFetchUserRatingToday()
    {
        var result = await DayService.GetUserRatingTodayAsync();
        if (result.IsSuccessStatusCode)
        {
            var day = await result.Content.ReadFromJsonAsync<CreateDayDTO>();
            usrRating = day.Rating;
        }
    }

    private void OnRatingChanged(int rating)
    {
        createDayDTO.Rating = rating;
    }

    private async Task SubmitDayEntry()
    {
        var result = await DayService.LogDayAsync(createDayDTO);
        if (!result.IsSuccessStatusCode)
        {
            return;
        }

        alreadyPosted = true;
        await HandleFetchAverageRatingToday();
        usrRating = createDayDTO.Rating;

        // Reset
        createDayDTO.Rating = 0;
        createDayDTO.Comment = String.Empty;
    }
}
